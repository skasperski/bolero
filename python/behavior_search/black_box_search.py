# Author: Alexander Fabisch <afabisch@informatik.uni-bremen.de>
#         Jan Hendrik Metzen <jhm@informatik.uni-bremen.de>

import numpy as np
from .behavior_search import BehaviorSearch, ContextualBehaviorSearch
from .behavior_search import PickableMixin
from ..optimizer import Optimizer, ContextualOptimizer
from ..representation import (BlackBoxBehavior, DummyBehavior,
                              HierarchicalBehaviorTemplate)
from ..utils.module_loader import from_dict


def _initialize_behavior(behavior, n_inputs, n_outputs):
    if isinstance(behavior, dict):
        behavior = from_dict(behavior)

    if not isinstance(behavior, BlackBoxBehavior):
        raise TypeError("Behavior '%r' must be of type 'BlackBoxBehavior'"
                        % behavior)

    behavior.init(n_inputs, n_outputs)
    return behavior


def _initialize_optimizer(optimizer, behavior):
    if isinstance(optimizer, dict):
        try:
            # Try to generate the constructor parameter 'initial_params'
            has_initial_params = ("initial_params" in optimizer
                                  and optimizer["initial_params"] is not None)
            if not has_initial_params:
                optimizer["initial_params"] = behavior.get_params()
            optimizer = from_dict(optimizer)
        except TypeError:
            # We did not specify that an optimizer must take the argument
            # 'initial_params', hence we cannot assume that it exists.
            del optimizer["initial_params"]
            optimizer = from_dict(optimizer)

    return optimizer


class BlackBoxSearchMixin(object):
    def get_next_behavior(self):
        self.optimizer.get_next_parameters(self.params)
        self.behavior.set_params(self.params)
        self.behavior.reset()
        return self.behavior

    def get_best_behavior(self):
        self.behavior.set_params(self.optimizer.get_best_parameters())
        self.behavior.reset()
        return self.behavior

    def set_evaluation_feedback(self, feedbacks):
        self.optimizer.set_evaluation_feedback(feedbacks)

    def is_behavior_learning_done(self):
        return self.optimizer.is_behavior_learning_done()


class BlackBoxSearch(BlackBoxSearchMixin, PickableMixin, BehaviorSearch):
    """Combine a black box optimizer with a black box behavior.

    Black box in this context means that only a fixed number of parameters
    will optimized with respect to a scalar reward function.

    Parameters
    ----------
    behavior : dict or Behavior subclass
        A black box behavior that is given directly or fully specified by
        a configuration dictionary.

    optimizer : dict or ContextualOptimizer subclass
        A black box optimizer that is given directly or fully specified by
        a configuration dictionary.

    metaparameter_keys : list, optional (default: [])
        Names of metaparameters for the behavior that will be set during
        initialization.

    metaparameter_values : list, optional (default: [])
        Values of metaparameters for the behavior that will be set during
        initialization.
    """
    def __init__(self, behavior, optimizer, metaparameter_keys=[],
                 metaparameter_values=[]):
        self.behavior = behavior
        self.optimizer = optimizer
        self.metaparameter_keys = metaparameter_keys
        self.metaparameter_values = metaparameter_values

    def init(self, n_inputs, n_outputs, _=0):
        self.behavior = _initialize_behavior(self.behavior, n_inputs, n_outputs)
        self.n_params = self.behavior.get_n_params()

        self.optimizer = _initialize_optimizer(self.optimizer, self.behavior)
        if not isinstance(self.optimizer, Optimizer):
            raise TypeError("BlackBoxSearch expects instance of Optimizer.")
        self.optimizer.init(self.n_params)

        self.behavior.set_meta_parameters(self.metaparameter_keys,
                                          self.metaparameter_values)
        self.params = np.zeros(self.n_params)


class JustOptimizer(BlackBoxSearch):
    """Wrap only the optimizer.

    Internally, we use a behavior that only returns the parameter vector that
    has been generated by the optimizer.

    Parameters
    ----------
    optimizer : dict or Optimizer
        A black-box optimizer that is given directly or fully specified by
        a configuration dictionary.
    """
    def __init__(self, optimizer):
        kwargs = {}
        if hasattr(optimizer, "initial_params"):
            kwargs["initial_params"] = optimizer.initial_params
        behavior = DummyBehavior(**kwargs)
        super(JustOptimizer, self).__init__(behavior, optimizer)


class ContextualBlackBoxSearch(BlackBoxSearchMixin, PickableMixin,
                               ContextualBehaviorSearch):
    """Combine a contextual black box optimizer with a black box behavior.

    Black box in this context means that only a fixed number of parameters
    will optimized with respect to a scalar reward function.

    Parameters
    ----------
    behavior : dict or Behavior subclass
        A black-box behavior that is given directly or fully specified by
        a configuration dictionary.

    optimizer : dict or ContextualOptimizer subclass
        A black-box optimizer that is given directly or fully specified by
        a configuration dictionary.

    metaparameter_keys : list, optional (default: [])
        Names of metaparameters for the behavior that will be set during
        initialization.

    metaparameter_values : list, optional (default: [])
        Values of metaparameters for the behavior that will be set during
        initialization.
    """
    def __init__(self, behavior, optimizer, metaparameter_keys=[],
                 metaparameter_values=[]):
        self.behavior = behavior
        self.optimizer = optimizer
        self.metaparameter_keys = metaparameter_keys
        self.metaparameter_values = metaparameter_values

    def init(self, n_inputs, n_outputs, context_dims):
        self.context_dims = context_dims

        self.behavior = _initialize_behavior(self.behavior, n_inputs, n_outputs)
        self.n_params = self.behavior.get_n_params()

        self.optimizer = _initialize_optimizer(self.optimizer, self.behavior)
        if not isinstance(self.optimizer, ContextualOptimizer):
            raise TypeError("ContextualBlackBoxSearch expects instance of "
                            "ContextualOptimizer")
        self.optimizer.init(self.n_params, self.context_dims)

        self.behavior.set_meta_parameters(self.metaparameter_keys,
                                          self.metaparameter_values)
        self.params = np.zeros(self.n_params)

    def get_desired_context(self):
        """Chooses desired context for next evaluation.

        Returns
        -------
        context : ndarray-like, default=None
            The context in which the next rollout shall be performed. If None,
            the environment may select the next context without any
            preferences.
        """
        return self.optimizer.get_desired_context()

    def set_context(self, context):
        """Set context of next evaluation.

        Note that the set context need not necessarily be the same that was
        requested by get_desired_context().

        Parameters
        ----------
        context : array-like, shape (n_context_dims,)
            The context in which the next rollout will be performed
        """
        self.optimizer.set_context(context)

    def get_best_behavior_template(self):
        """Return current best estimate of contextual policy."""
        upper_level_policy = self.optimizer.best_policy()
        return HierarchicalBehaviorTemplate(upper_level_policy, self.behavior,
                                            explore=False)


class JustContextualOptimizer(ContextualBlackBoxSearch):
    """Wrap only the contextual optimizer.

    Internally, we use a behavior that only returns the parameter vector that
    has been generated by the optimizer.

    Parameters
    ----------
    optimizer : dict or ContextualOptimizer
        A contextual optimizer that is given directly or fully specified by
        a configuration dictionary.

    n_params : int, optional (default: len(optimizer.initial_params))
        Number of parameters to optimize
    """
    def __init__(self, optimizer):
        kwargs = {}
        if hasattr(optimizer, "initial_params"):
            kwargs["initial_params"] = optimizer.initial_params
        behavior = DummyBehavior(**kwargs)
        super(JustContextualOptimizer, self).__init__(behavior, optimizer)
